<?php
	function mysql_entities_fix_string($link, $String)
	{
		if(LS_Check($link, $String))
			return htmlentities(mb_convert_encoding(mysql_fix_string($link, $String), 'UTF-8', 'ASCII'), ENT_SUBSTITUTE, "UTF-8");
		return "";
	}
	
	function mysql_fix_string($link, $String)
	{
		if(LS_Check($link, $String)){
			$String = stripslashes($String);
			return mysqli_real_escape_string($link, $String);
		}
		return "";
	}
	
	
	function login($link, $username, $password)
	{
		if(LUP_Check($link, $username, $password)){
			$sql = "select * from Admins where UserName = '$username';";
			$result = sqlQuery($link,$sql);
			if (!$result)
				die($link->error);
			elseif($result->num_rows){
				$row = $result->fetch_array(MYSQLI_NUM);
				$result->close();
				$salts = getSalts($row);
				$s = $salts[0];
				$s2 = $salts[1];
				$token = hasher($password, $salts[0], $salts[1]);
				if ($token === $row[4]){ 
					return True;
					}
				else die("Invalid username/password");
			}
			else
				die("Invalid username/password");
		}
		return False;
	}
	
	function getSalts($row){
		$salt = null;
		if($row && count($row) === 7){
			echo "yes";
			$salt[0] = $row['5'];
			$salt[1] = $row['6'];
		}
		return $salt;
	}

	function setCookies($username, $password){

		if(is_string($username) && is_string($password))
		{
			setcookie('user_cookie', $username, time() + 10, '/');
			setcookie('pass_cookie', $password, time() + 10, '/');
		}
	}
	
	function LLTA_Check($link ,$location, $type, $amount){
		return (CheckAmount($amount) && is_string($type) && file_exists($location) && $link);
	}
	
	function LTA_Check($location, $type, $amount){
		return (CheckAmount($amount) && is_string($type) && file_exists($location));
	}
	
	function getadminBytes($link ,$location, $type, $amount){
		if(LLTA_Check($link ,$location, $type, $amount)){
			$amount = getnewAmount($location, $type, $amount);
			return getBytes($link ,$location, $type, $amount);
		}
	}
	
	function getnewAmount($location, $type, $amount){
		if(LTA_Check($location, $type, $amount)){
			if(is_executable($location) !== false)
			{
				return $amount + 120;
			}
			elseif(isset($type) && $type === 'application/pdf')
			{
				return $amount + 10;
			}
			else{
				return $amount;
			}
		}
	}
	
	function getBytes($link ,$location, $type, $amount){
		$String = "";
		#echo "$type";
		if(LLTA_Check($link ,$location, $type, $amount)){
			if(isset($type) && $type === 'text/plain')
			{
				return SeekReader($link, $location, $amount, 0);
			}
			elseif(is_executable($location) !== false)
			{
				return SeekReader($link, $location, $amount, 120);
			}
			elseif(isset($type) && $type === 'application/pdf')
			{
				return SeekReader($link, $location, $amount, 10);
			}
			else{
				#echo "<Br> file type not used Plain Text, executable, and pdfs. Information Might Be off<Br>";
				return SeekReader($link, $location, $amount, 10);
			}
			
		}
		return $String;
	}
	
	
	function SeekReader($link, $location, $amount, $header){
		$String = '';
		if(LLAH_Check($link ,$location, $amount, $header)){
			$handle = fopen($location,"rb");
			fseek($handle, $header);
			$String = fread($handle, ($amount - $header));
			fclose($handle);
			$String = cleanslash(mysql_entities_fix_string($link, $String));
		}
		return $String;	
	}
	
	
	function cleanslash($String){
		if(is_string($String))
			return str_replace('\\', '.-', $String);
	}
	
	function sqlQuery($link, $sql)
	{
		if(LS_Check($link, $sql)){
			return mysqli_query($link,$sql);
		}
	}
	
	function sqlStmt($link, $sql){
		if(LS_Check($link, $sql)){
			$stmt = mysqli_prepare($link,$sql);
			if(!$stmt->execute()){
				echo "Insert Error: " . mysqli_Error($link);
				return false;
			}
			mysqli_stmt_close($stmt);
			return true;
		}
		return false;
	}
	
	function hasher($pass, $salt1, $salt2){
		if(is_string($pass) && is_string($salt1) && is_string($salt2)){
			return hash('ripemd128', "$salt1$pass$salt2");
		}
		return '';
	}
	
	function Salter(){
		$chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`~!@#$%^&*()-=_+';
		$l = strlen($chars) - 1;
		$str = '';
		$size = rand (5, 10);
		for ($i = 0; $i < $size; ++$i) {
			$str .= $chars[rand(0, $l)];
		}
		return $str;
	}
	
	function malNameInsert($link, $MalName, $Bytes, $admin){
		if(mal_Check($link, $MalName, $Bytes, $admin)){
			$sql = "insert into malware(name, Sequence, admin) VALUES('$MalName', '$Bytes', '$admin');";
			$added = sqlStmt($link,$sql);
			if($added)
				return "$MalName: $Bytes";
		}
		return "";
	}
	
	function getAllMalware($link){
		if($link){
			$sql = "select Name, Sequence from malware;";
			return sqlQuery($link,$sql);
		}
		return false;
	}
	
	function checkMalwareName($String){
		$regex = '/^[A-Za-z0-9]+$/';
		if(is_string($String) && strlen($String) > 3){
			if(strlen($String) < 33){
				if(preg_match($regex, $String))
					return $String;
				else{
					echo "Invalid characters used in MalName";
					exit;
					return "";
				}
			}
			else{
				echo "MalName Length must be 32 or less";
				exit;
				return "";
			}
		}
		else{
			echo "MalName Length must be at least 4";
			exit;
			return "";
		}	
	}
	
	function CheckAmount($amount){
		return (is_integer($amount) && $amount >= 0);
	}
	
	function LLA_Check($link ,$location, $amount){
		return (CheckAmount($amount)&& file_exists($location) && $link);
	}
	
	function LLAH_Check($link ,$location, $amount, $header){
		return (CheckAmount($amount)&& file_exists($location) && $link && CheckAmount($header));
	}
	function LS_Check($link, $String){
		return (is_string($String) && $link);
	}
	
	function LUP_Check($link, $username, $password){
		return (is_string($username) && is_string($password) && $link);
	}
	
	function mal_Check($link, $String1, $String2, $String3){
		return ($link && is_string($String1) && is_string($String2) && is_string($String3));
	}
	
	
	
	
	
	
	
	

?>